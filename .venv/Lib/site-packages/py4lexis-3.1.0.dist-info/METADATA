Metadata-Version: 2.1
Name: py4lexis
Version: 3.1.0
Summary: Provides functions to manage datasets and Airflow workflows within LEXIS Platform. Also, iRODS methods can be used to upload/download datasets.
Author-email: Martin Golasowski <martin.golasowski@vsb.cz>, Ladislav Foltyn <ladislav.foltyn@vsb.cz>, Marek Nieslanik <nie0067@vsb.cz>
License: MIT License
        
        Copyright (c) 2022 LEXIS
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Keywords: airflow,datasets,py4lexis,lexis,iRODS
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Requires-Python: <3.12,>=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: aiohappyeyeballs==2.4.3
Requires-Dist: aiohttp==3.10.10
Requires-Dist: aiosignal==1.3.1
Requires-Dist: annotated-types==0.7.0
Requires-Dist: anyio==4.6.0
Requires-Dist: async-property==0.2.2
Requires-Dist: attrs==24.2.0
Requires-Dist: certifi==2024.8.30
Requires-Dist: cffi==1.17.1
Requires-Dist: charset-normalizer==3.4.0
Requires-Dist: click==8.1.7
Requires-Dist: colorama==0.4.6
Requires-Dist: cryptography==43.0.1
Requires-Dist: defusedxml==0.7.1
Requires-Dist: deprecation==2.1.0
Requires-Dist: frozenlist==1.4.1
Requires-Dist: h11==0.14.0
Requires-Dist: httpcore==1.0.6
Requires-Dist: httpx==0.27.2
Requires-Dist: humanize==4.11.0
Requires-Dist: idna==3.10
Requires-Dist: jwcrypto==1.5.6
Requires-Dist: markdown-it-py==3.0.0
Requires-Dist: mdurl==0.1.2
Requires-Dist: multidict==6.1.0
Requires-Dist: numpy>=2.1.2
Requires-Dist: packaging==24.1
Requires-Dist: pandas==2.2.3
Requires-Dist: pipdeptree>=2.23.4
Requires-Dist: prettytable==3.11.0
Requires-Dist: propcache==0.2.0
Requires-Dist: pycparser==2.22
Requires-Dist: pydantic<3.0.0,>2.1.0
Requires-Dist: pydantic_core==2.23.4
Requires-Dist: Pygments==2.18.0
Requires-Dist: python-dateutil==2.9.0.post0
Requires-Dist: python-irodsclient@ git+https://github.com/lexis-project/python-irodsclient.git@7992afa83640ed02f66c8f823f4d375a2992a263
Requires-Dist: python-keycloak==4.6.2
Requires-Dist: pytz==2024.2
Requires-Dist: requests==2.32.3
Requires-Dist: requests-toolbelt==1.0.0
Requires-Dist: rich==13.9.4
Requires-Dist: shellingham==1.5.4
Requires-Dist: six==1.16.0
Requires-Dist: sniffio==1.3.1
Requires-Dist: tabulate==0.9.0
Requires-Dist: tinydb==4.8.1
Requires-Dist: tuspy>=1.0.3
Requires-Dist: typer==0.13.1
Requires-Dist: typing_extensions==4.12.2
Requires-Dist: tzdata==2024.2
Requires-Dist: urllib3==2.2.3
Requires-Dist: wcwidth==0.2.13
Requires-Dist: xmlrunner==1.7.7
Requires-Dist: yarl==1.14.0

# Py4Lexis

Py4Lexis is a Python package (version 3.10 and 3.11) which provides a manager to handle datasets within the LEXIS DDI (upload/download by TUS client, list existing datasets),
manager to upload/download data to/from datasets using iRODS client, and a manager to handle workflows in the LEXIS Airflow instance (list existing workflows, execute workflows, check state). 
Moreover, CLI commands are available to perform such actions.

Logging in to the LEXIS session is performed via the LEXIS login page. Thus, *B2Access* and *MyAccessID* can be used to log in.

## Acknowledgement

### e-Infra CZ
This work was supported by the Ministry of Education, Youth and Sports of the Czech Republic through the e-INFRA CZ (ID:90254)

___
## Installation
1. Create a virtual environment for your Python (version 3.10 and 3.11) project and activate it.
2. Install the package using:
   ```shell
   pip install py4lexis --index-url https://opencode.it4i.eu/api/v4/projects/107/packages/pypi/simple
   ```      
    
  It also will install the Py4Lexis package with all its dependencies defined in *requirements.txt*.

___
## Quick start
### Initialize LEXIS session
Before some of the existing manager is used, LEXIS session has to be initialized. 
The user will be prompted to log in via LEXIS login page by default. 
LEXIS, MyAccessID or B2Access can be used.
```python
from py4lexis.session import LexisSession

session = LexisSession()
```
More session classes are shown in **Initialize LEXIS session** section below.

### Dataset Manager
A new dataset within LEXIS Platform and subsequent upload of files to it can be performed by the following script.
```python
from py4lexis.session import LexisSession
from py4lexis.ddi.datasets import Datasets

session = LexisSession()

datasets = Datasets(session=session,
                    suppress_print=False)

datasets.tus_uploader_new(access="DATASET_ACCESS_POLICY", 
                          project="LEXIS_PROJECT_SHORT_NAME", 
                          storage_name="iRODS_STORAGE_NAME",
                          storage_resource="iRODS_STORAGE_RESOURCE",
                          filename="FILE_NAME.tar.gz", 
                          file_path="./path/to/file",   
                          title="DATASET_TITLE")
```
*NOTE*: When '.tar.gz' file is being uploaded, it will be expanded (unzipped) in automate way. 
Further, if `suppress_print` parameter is set to `False`, all `INFO` prints will be performed. 
At last, it is recommended to set datasets title while creating a new one. 

**WARNING**: Large files (above 10GB) should be uploaded via `py4lexis.lexis_irods` methods.
             Uploading via TUS methods can behave in unexpected way.

*NOTE*: `DATASET_ACCESS_POLICY` should be one of: `["user", "project", "public"]`.

There is also a possibility to download existing datasets within the Py4Lexis package. 
The minimal script to do so is the following one.
```python
from py4lexis.session import LexisSession
from py4lexis.ddi.datasets import Datasets

session = LexisSession()

datasets = Datasets(session=session,
                    suppress_print=False)

datasets.download_dataset(dataset_id="DATASET_DATASET_ID",
                          destination_filepath="./path/to/local/folder")
```
*NOTE*: The dataset's dataset ID can be obtained via the `get_all_datasets()` function.

### Airflow Manager
The minimal script to execute an existing workflow (DAG) is the following.
```python
from py4lexis.session import LexisSession
from py4lexis.workflows.airflow import Airflow

session = LexisSession()

airflow = Airflow(session=session,
                  suppress_print=False)

wf_params = airflow.get_workflow_params(workflow_id="WORKFLOW_ID")

airflow.execute_workflow(workflow_id="WORKFLOW_ID",
                         workflow_parameters=wf_params,
                         workflow_run_id="USER_DEFINED_RUN_ID")
```
*NOTE*: It is recommended to set `workflow_run_id`. By default, it is set to ISO DateTime combined with `py4lexis_exec_` prefix.

All existing workflows within LEXIS Airflow instance can be obtained with the following script.
```python
from py4lexis.session import LexisSession
from py4lexis.workflows.airflow import Airflow

session = LexisSession()

airflow = Airflow(session=session,
                  suppress_print=False)

workflows = airflow.get_workflows_list(content_as_pandas=True)
```
*NOTE*: If `content_as_pandas` is set to `True`, the list of existing workflows will be formated as pandas `DataFrame` table.

### LEXIS iRODS Manager
LEXIS iRODS Manager is an alternative for the TUS upload (and DDI download endpoint) from Datasets Manager. iRODS Manager provides parallel upload/download via Python's iRODS-client package methods. 

To create a new dataset and upload whole local directory to it, one can simply use the following script.
```python
from py4lexis.session import LexisSession
from py4lexis.lexis_irods import iRODS

session = LexisSession()

irods = iRODS(session=session,
              suppress_print=False)

response = irods.create_dataset(access="DATASET_ACCESS_POLICY",
                                project="LEXIS_PROJECT_SHORT_NAME",
                                title="DATASET_TITLE")

irods.upload_directory_to_dataset(local_directorypath="./path/to/directory",
                                  access="DATASET_ACCESS_POLICY",
                                  project="LEXIS_PROJECT_SHORT_NAME",
                                  dataset_id=response["dataset_id"])
```

*NOTE*: `DATASET_ACCESS_POLICY` should be one of: `["user", "project", "public"]`.

### HEAppE Command Template Manager
HEAppE Command Template Manager is deprecated in Py4Lexis package. Existing Python HEAppE client is located at [this repository](https://github.com/It4innovations/heappeac).

### CLI usage
All mentioned functions (and more others!) can be also used directly from CLI. 
To do so, type the following to provide help on how to use managers via CLI.
```shell
python -m py4lexis.cli.session --help

python -m py4lexis.cli.datasets --help

python -m py4lexis.cli.airflow --help

python -m py4lexis.cli.lexis_irods --help
```
or alternatively
```shell
python -m py4lexis.cli --help

python -m py4lexis.cli session --help

python -m py4lexis.cli datasets --help

python -m py4lexis.cli airflow --help

python -m py4lexis.cli lexis_irods --help
```

#### CLI: IMPORTANT NOTES
To initialize LEXIS session via CLI, use one of the following commands, please:
```shell
python -m py4lexis.cli.session login-url
```
to log in via LEXIS login page, or
```shell
python -m py4lexis.cli.session login-credentials
```
to log in via LEXIS credentials, or
```shell
python -m py4lexis.cli.session login-offline
```
via user's refresh (offline) token. After successfull authorization, new inner console (terminal/powershell) will be opened with a new defined environment variable `PY4LEXIS_TOKEN`. `PY4LEXIS_TOKEN` holds user's refresh (offline) token. In other way, user has to pass offline token to each CLI command.

After all user's work is done, one has to use
```shell
python -m py4lexis.cli.session logout
```
to revoke offline token.

Each method in CLI will exit on error till `exit_on_error=False`.

___
## Example scripts
There is a possibility to use example scripts which can be found at:
1. To manage Datasets using DDI endpoints:
[datasets_example.py](https://opencode.it4i.eu/lexis-platform/clients/py4lexis/-/blob/main/examples/datasets_example.py?ref_type=heads)
2. To upload/download Datasets using iRODS methods:
[irods_example.py](https://opencode.it4i.eu/lexis-platform/clients/py4lexis/-/blob/main/examples/irods_example.py?ref_type=heads)
3. To manage Airflow workflows:
[airflow_example.py](https://opencode.it4i.eu/lexis-platform/clients/py4lexis/-/blob/main/examples/airflow_example.py?ref_type=heads)

*NOTE*: All given methods are also described in the README below. 
Moreover, all classes and functions are well documented. 
Preview of docstrings should be shown while creating scripts in IDE.

___
## Initialize LEXIS session -- Advanced info
To log in to the LEXIS session via login page, use:
```python
from py4lexis.session import LexisSession

session = LexisSession()
```
By default, you will be redirected to the LEXIS login page. *LEXIS*, *B2Access* or *MyAccessID* credentials can be used to log in.

*NOTE*: The LexisSession has the following parameters:
* `auth_url` -- URL for authorization back-end. `None` by default.
* `realm` -- Realm used for authorization. `None` by default.
* `zone` -- iRODS zone. IT4I iRODS zone is used by default.
* `login_method` -- Method used for login the user. `"url"` prints out url which is used for login via LEXIS login page. `"credentials"` performs login using username/password. If `"offline"` method is used, existing offline (refresh) token should be passed to `refresh_token` optional parameter.
* `suppress_print` -- If `False`, messages will be printed. `False` by default.
* `log_file` -- Path to a log file. `"./lexis_logs.log"` by default.
* `in_cli` -- Flag if the session is initialised using CLI commands or not. It is set in automated way.
* `offline_access` -- If offline refresh token has to be acquired or not. `False` by default.
* `refresh_token` -- Parameter that holds existing offline (refresh) token. Should be used when `"offline"` login method is selected. `None` by default. Offline/refresh token can also be stored in environment variable called `PY4LEXIS_TOKEN`.
* `username` -- Parameter that holds existing LEXIS username. Should be used when `"credentials"` login method is selected. `None` by default.
* `password` -- Parameter that holds password of existing LEXIS user. Should be used when `"credentials"` login method is selected. `None` by default.
* `exit_on_error` -- If True, program will `exit()` on error.

One can also use another classes to initialze LEXIS session:
* `LexisSessionURL()` -- `login_method="url"` is hardcoded. Omitted parameters are: `refresh_token`, `username`, `password`.
* `LexisSessionCredentials()` -- `login_method="credentials"` is hardcoded. Omitted parameters are: `refresh_token`.
* `LexisSessionOffline()` -- `login_method="url"` is hardcoded. Omitted parameters are: `offline_access`, `username`, `password`.
___
## Manage LEXIS datasets
Examples of how to use Py4Lexis to manage datasets within LEXIS DDI are shown below. 
Further information about classes/functions can be found in docstrings of each class/function.

*NOTE*: There is also available the CLI version of the Manager within py4lexis package. 
Type `python -m py4lexis.cli.datasets --help` to provide more information. 

### Initialize Datasets Manager

The Datasets class to manage datasets within LEXIS Platform is initialized using the following script.
Further information about classes/functions can be found in docstrings of each class/function.

___
## Manage Airflow's workflows
Examples of how to use Py4Lexis to manage Airflow's workflows within the LEXIS Airflow instance are shown below. 
Further information about classes/functions can be found in docstrings of each class/function.

*NOTE*: There is also available the CLI version of the Manager within py4lexis package. 
Type `python -m py4lexis.cli.airflow --help` to provide more information. 

___
## LEXIS iRODS
Examples of how to use Py4Lexis to manage files in datasets within the LEXIS Platform are shown below. 
Further information about classes/functions can be found in docstrings of each class/function.

*NOTE*: There is also available the CLI version of the Manager within py4lexis package. 
Type `python -m py4lexis.cli.lexis_irods --help` to provide more information. 

___
## HEAppE Command Templates Manager
HEAppE Command Template Manager is deprecated in Py4Lexis package. Existing Python HEAppE client is located at [this repository](https://github.com/It4innovations/heappeac).
___
