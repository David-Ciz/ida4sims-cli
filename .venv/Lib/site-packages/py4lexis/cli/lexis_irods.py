from datetime import (
    date, 
    datetime
)
from logging import (
    Logger, 
    getLogger
)
from typing import (
    Optional, 
    List
)
from enum import Enum
from json import loads

# Making ASCII table
# Source: https://stackoverflow.com/questions/5909873/how-can-i-pretty-print-ascii-tables-with-python
import typer
from typing_extensions import Annotated
from irods.collection import iRODSCollection
from py4lexis.core.exceptions import Py4LexisException
from py4lexis.core.userorg import get_zone_by_location

from py4lexis.session import LexisSessionOffline
from py4lexis.lexis_irods import iRODS


app = typer.Typer(name="lexis-irods",
                  help="Holds commands to manage iRODS session. Type '[b]python -m py4lexis.cli irods --help[/b]' to see list of available commands.",
                  rich_markup_mode="rich")


logger: Logger = getLogger(__name__)


class Access(str, Enum):
    public="public"
    project="project"
    user="user"    


@app.command()
def put_data_object_to_dataset(local_filepath: Annotated[
                                   str,
                                   typer.Argument(help="Path (relative or absolute) of a file in local machine.")
                                ],
                                dataset_filepath: Annotated[
                                    str,
                                    typer.Argument(help="Path (relative) within LEXIS dataset where the file should be put.")
                                ],
                                access: Annotated[
                                    Access,
                                    typer.Argument(help="Access type defined for a dataset.")],
                                project: Annotated[
                                    str,
                                    typer.Argument(help="LEXIS project's shortname.")
                                ],
                                dataset_id: Annotated[
                                    str,
                                    typer.Argument(help="Dataset's dataset ID (UUID).")
                                ],
                                zone: Annotated[
                                    Optional[str],
                                    typer.Option(help="iRODS zonename. If 'None', then: 'IT4ILexisV2' is used.")
                                ]=None,
                                host: Annotated[
                                    Optional[str],
                                    typer.Option(help="Host for the iRODS session.")
                                ]=None,
                                port: Annotated[
                                    Optional[str],
                                    typer.Option(help="Port for the iRODS session.")
                                ]=None,
                                overwrite: Annotated[
                                    Optional[bool],
                                    typer.Option(help="To overwrite existing data.")
                                ]=False,
                                suppress_print: Annotated[
                                    bool,
                                    typer.Option(help="If prints have to be suppressed or not. By default 'False'.")
                                ]=False,
                                refresh_token: Annotated[
                                    Optional[str],
                                    typer.Option(help="Refresh (offline) token used for authentication. By default environemnt variable 'PY4LEXIS_TOKEN' is used.")
                                ]=None,
                                exit_on_error: Annotated[
                                    bool,
                                    typer.Option(help="If True, program will exit() on error.")
                                ]=True) -> None:
    """
    Puts an object from local to LEXIS dataset via iRODS. 

    [bold blue]──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────[/bold blue]
    
    [bold yellow]Further description:[/bold yellow]
    
    [b yellow]*[/b yellow] Parallel transfer is automatically enabled for data objects with 32+ MB. 

    [b yellow]*[/b yellow] Zone 'IT4ILexisV2' is used by default if zone='None'.

    [bold blue]──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────[/bold blue]

    [bold red]Examples of usage[/bold red]:

    [b]Upload data file to dataset: [/b]
        [b yellow]>[/b yellow] python -m py4lexis.cli.lexis_irods put-data-object-to-dataset "./datafiles/first/test10M_01.dat" "./" project demoproject 2913cc20-b937-11ee-b732-0050568f0c4e
    """
    
    session: LexisSessionOffline = LexisSessionOffline(in_cli=True,
                                                       refresh_token=refresh_token,
                                                       exit_on_error=exit_on_error)

    irods: iRODS = iRODS(session=session, 
                         suppress_print=suppress_print, 
                         host=host, 
                         port=port, 
                         zone=zone,
                         exit_on_error=exit_on_error)

    irods.put_data_object_to_dataset(local_filepath=local_filepath,
                                     dataset_filepath=dataset_filepath,
                                     access=access.value,
                                     project=project,
                                     dataset_id=dataset_id,
                                     zone=zone,
                                     overwrite=overwrite)

    return None


@app.command()
def get_data_object_from_dataset(dataset_filepath: Annotated[
                                     str,
                                     typer.Argument(help="Path (relative) within LEXIS dataset where the file can be found.")
                                 ],
                                 access: Annotated[ 
                                     Access,
                                     typer.Argument(help="Access type defined for a dataset.")
                                 ],
                                 project: Annotated[
                                     str,
                                     typer.Argument(help="LEXIS project's shortname.")
                                 ],
                                 dataset_id: Annotated[
                                     str,
                                     typer.Argument(help="Dataset's dataset ID (UUID).")
                                 ],
                                 local_filepath: Annotated[
                                     Optional[str],
                                     typer.Option(help="Path (relative or absolute) for a file in local machine which will be used for download.")
                                 ]=None,
                                 zone: Annotated[
                                     Optional[str],
                                     typer.Option(help="iRODS zonename. If 'None', then: 'IT4ILexisV2' is used.")
                                 ]=None,
                                 host: Annotated[
                                     Optional[str],
                                     typer.Option(help="Host for the iRODS session.")
                                 ]=None,
                                 port: Annotated[
                                     Optional[str],
                                     typer.Option(help="Port for the iRODS session.")
                                 ]=None,
                                 suppress_print: Annotated[
                                     bool,
                                     typer.Option(help="If prints have to be suppressed or not. By default 'False'.")
                                 ]=False,
                                 refresh_token: Annotated[
                                     Optional[str],
                                     typer.Option(help="Refresh (offline) token used for authentication. By default environemnt variable 'PY4LEXIS_TOKEN' is used.")
                                 ]=None,
                                 exit_on_error: Annotated[
                                      bool,
                                      typer.Option(help="If True, program will exit() on error.")
                                 ]=True) -> None:
    """
    Gets an object from LEXIS dataset to local via iRODS.

    [bold blue]──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────[/bold blue]
    
    [bold yellow]Further description:[/bold yellow]
    
    [b yellow]*[/b yellow] Parallel transfer is automatically enabled for data objects with 32+ MB. 

    [b yellow]*[/b yellow] Local filepath will be relative (in CWD) starting by dataset's dataset ID if local_filepath='None'.

    [b yellow]*[/b yellow] Zone 'IT4ILexisV2' is used by default if zone='None'.

    [bold blue]──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────[/bold blue]

    [bold red]Examples of usage[/bold red]:

    [b]Download data file from dataset: [/b]
        [b yellow]>[/b yellow] python -m py4lexis.cli.lexis_irods get-data-object-from-dataset "./test10M_01.dat" project demoproject 2913cc20-b937-11ee-b732-0050568f0c4e
    """
    session: LexisSessionOffline = LexisSessionOffline(in_cli=True,
                                                       refresh_token=refresh_token,
                                                       exit_on_error=exit_on_error)
    irods: iRODS = iRODS(session=session, 
                         suppress_print=suppress_print,
                         host=host,
                         port=port,
                         zone=zone,
                         exit_on_error=exit_on_error)

    irods.get_data_object_from_dataset(dataset_filepath=dataset_filepath,
                                       access=access.value,
                                       project=project,
                                       dataset_id=dataset_id,
                                       local_filepath=local_filepath,
                                       zone=zone)
        
    return None
    

@app.command()
def upload_directory_to_dataset(local_directorypath: Annotated[
                                     str,
                                     typer.Argument(help="Path (absolute or relative) of a directory in local machine.")
                                ],
                                access: Annotated[
                                     Access,
                                     typer.Argument(help="Access type defined for a dataset.")
                                ],
                                project: Annotated[
                                     str,
                                     typer.Argument(help="LEXIS project's shortname.")
                                ],
                                dataset_id: Annotated[
                                     str,
                                     typer.Argument(help="Dataset's dataset ID (UUID).")
                                ],
                                dataset_directorypath: Annotated[
                                     Optional[str],
                                     typer.Option(help="Path (relative) within dataset to which a directory will be uploaded.")
                                ]=None,
                                zone: Annotated[
                                     Optional[str],
                                     typer.Option(help="iRODS zonename. If 'None', then: 'IT4ILexisV2' is used.")
                                ]=None,
                                overwrite: Annotated[
                                    Optional[bool],
                                    typer.Option(help="To overwrite existing data.")
                                ]=False,
                                host: Annotated[
                                    Optional[str],
                                    typer.Option(help="Host for the iRODS session.")
                                ]=None,
                                port: Annotated[
                                    Optional[str],
                                    typer.Option(help="Port for the iRODS session.")
                                ]=None,
                                suppress_print: Annotated[
                                    bool,
                                    typer.Option(help="If prints have to be suppressed or not. By default 'False'.")
                                ]=False,
                                refresh_token: Annotated[
                                    Optional[str],
                                    typer.Option(help="Refresh (offline) token used for authentication. By default environemnt variable 'PY4LEXIS_TOKEN' is used.")
                                ]=None,
                                exit_on_error: Annotated[
                                    bool,
                                    typer.Option(help="If True, program will exit() on error.")
                                ]=True) -> None:
    """
    Upload whole directory with subdirectories and data objects from local to LEXIS dataset via iRODS.

    [bold blue]──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────[/bold blue]
    
    [bold yellow]Further description:[/bold yellow]
    
    [b yellow]*[/b yellow] If no dataset_path is defined, then path within the dataset will start by 'directory name' which has to be uploaded.

    [b yellow]*[/b yellow] Parallel transfer is automatically enabled for data objects with 32+ MB. 

    [b yellow]*[/b yellow] Dataset directory path is set to root if dataset_directory='None'.

    [b yellow]*[/b yellow] Zone 'IT4ILexisV2' is used by default if zone='None'.

    [bold blue]──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────[/bold blue]

    [bold red]Examples of usage[/bold red]:

    [b]Upload directory to dataset[/b]
        [b yellow]>[/b yellow] python -m py4lexis.cli.lexis_irods upload-directory-to-dataset "./datafiles/first" project demoproject 2913cc20-b937-11ee-b732-0050568f0c4e
    """
    session: LexisSessionOffline = LexisSessionOffline(in_cli=True,
                                                       refresh_token=refresh_token,
                                                       exit_on_error=exit_on_error)
    irods: iRODS = iRODS(session=session, 
                         suppress_print=suppress_print,
                         host=host,
                         port=port,
                         zone=zone,
                         exit_on_error=exit_on_error)
    
    irods.upload_directory_to_dataset(local_directorypath=local_directorypath,
                                      access=access.value,
                                      project=project,
                                      dataset_id=dataset_id,
                                      dataset_directorypath=dataset_directorypath,
                                      zone=zone,
                                      overwrite=overwrite)

    return None
    

@app.command()
def download_dataset_as_directory(access: Annotated[
                                     Access,
                                     typer.Argument(help="Access type defined for a dataset.")
                                  ],
                                  project: Annotated[
                                     str,
                                     typer.Argument(help="LEXIS project's shortname.")
                                  ],
                                  dataset_id: Annotated[
                                     str,
                                     typer.Argument(help="Dataset's dataset ID (UUID).")
                                  ],
                                  local_directorypath: Annotated[
                                     Optional[str],
                                     typer.Option(help="Path (relative or absolute) for a directory in local machine which will be used for download.")
                                  ]=None,
                                  dataset_directorypath: Annotated[
                                     Optional[str],
                                     typer.Option(help="Path (relative) within dataset to from which the download will start. If 'None', then by default is set to root.")
                                  ]=None,
                                  zone: Annotated[
                                     Optional[str],
                                     typer.Option(help="iRODS zonename. If 'None', then: 'IT4ILexisV2' is used.")
                                  ]=None,
                                  host: Annotated[
                                      Optional[str],
                                      typer.Option(help="Host for the iRODS session.")
                                  ]=None,
                                  port: Annotated[
                                      Optional[str],
                                      typer.Option(help="Port for the iRODS session.")
                                  ]=None,
                                  suppress_print: Annotated[
                                      bool,
                                      typer.Option(help="If prints have to be suppressed or not. By default 'False'.")
                                  ]=False,
                                  refresh_token: Annotated[
                                     Optional[str],
                                     typer.Option(help="Refresh (offline) token used for authentication. By default environemnt variable 'PY4LEXIS_TOKEN' is used.")
                                  ]=None,
                                  exit_on_error: Annotated[
                                      bool,
                                      typer.Option(help="If True, program will exit() on error.")
                                  ]=True) -> None:
    """
    Downloads whole dataset as directory.

    [bold blue]──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────[/bold blue]
    
    [bold yellow]Further description:[/bold yellow]
    
    [b yellow]*[/b yellow] Empty directories will be ignored.

    [b yellow]*[/b yellow] Parallel transfer is automatically enabled for data objects with 32+ MB. 

    [b yellow]*[/b yellow] Local directory path will be relative (in CWD) starting by dataset's dataset ID if local_directorypath='None'.

    [b yellow]*[/b yellow] Zone 'IT4ILexisV2' is used by default if zone='None'.

    [bold blue]──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────[/bold blue]

    [bold red]Examples of usage[/bold red]:

    [b]Download dataset: [/b]
        [b yellow]>[/b yellow] python -m py4lexis.cli.lexis_irods download-dataset-as-directory project demoproject 2913cc20-b937-11ee-b732-0050568f0c4e

    [b]Download dataset to defined local_path: [/b]
        [b yellow]>[/b yellow] python -m py4lexis.cli.lexis_irods download-dataset-as-directory project demoproject 2913cc20-b937-11ee-b732-0050568f0c4e --local_directorypath "./downloads/"
    """

    session: LexisSessionOffline = LexisSessionOffline(in_cli=True,
                                                       refresh_token=refresh_token,
                                                       exit_on_error=exit_on_error)
    irods: iRODS = iRODS(session=session, 
                         suppress_print=suppress_print,
                         host=host,
                         port=port,
                         zone=zone,
                         exit_on_error=exit_on_error)

    irods.download_dataset_as_directory(access=access.value,
                                        project=project,
                                        dataset_id=dataset_id,
                                        local_directorypath=local_directorypath,
                                        dataset_directorypath=dataset_directorypath,
                                        zone=zone)

    return None


@app.command()
def create_dataset(access: Annotated[
                        Access, 
                        typer.Argument(help="Access type used for the dataset.")
                   ],
                   project: Annotated[
                        str, 
                        typer.Argument(help="Project's shortname.")
                   ], 
                   zone: Annotated[
                        Optional[str],
                        typer.Option(help="iRODS zonename. If 'None', then: 'IT4ILexisV2' is used.")
                   ]=None,
                   title: Annotated[
                        str,
                        typer.Option(help="Title of the dataset.")
                   ]=f"UNTITLED_Dataset_{datetime.now().strftime('%d-%m-%Y_%H:%M:%S')}",
                   additional_metadata: Annotated[
                        str,
                        typer.Option(help="Additional (arbitrary) metadata for the dataset in JSON format.")
                   ] = None,
                   dataset_type: Annotated[
                        str,
                        typer.Option(help="Type of the dataset. Default 'Dataset'.")
                   ] = None,
                   datacite: Annotated[
                        str,
                        typer.Option(help="Datacite metadata for the dataset in JSON format.")
                   ] = None,
                   host: Annotated[
                        Optional[str],
                        typer.Option(help="Host for the iRODS session.")
                   ]=None,
                   port: Annotated[
                       Optional[str],
                       typer.Option(help="Port for the iRODS session.")
                   ]=None,
                   suppress_print: Annotated[
                        bool,
                        typer.Option(help="If prints have to be suppressed or not. By default 'False'.")
                   ]=False,
                   refresh_token: Annotated[
                        Optional[str],
                        typer.Option(help="Refresh (offline) token used for authentication. By default environemnt variable 'PY4LEXIS_TOKEN' is used.")
                   ]=None,
                   exit_on_error: Annotated[
                       bool,
                       typer.Option(help="If True, program will exit() on error.")
                   ]=True) -> None:
    """
    Creates an empty dataset with specified attributes.

    [bold blue]──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────[/bold blue]

    [bold yellow]Further description:[/bold yellow]

        [b yellow]*[/b yellow] It will print out an [b]dataset_id[/b] of the created dataset. Given ID should be used for other commands. 

        [b yellow]*[/b yellow] The method is based Datasets class in py4lexis.ddi.

        [b yellow]*[/b yellow] Zone 'IT4ILexisV2' is used by default if zone='None'.

        [b yellow]*[/b yellow] There are some multiple options: dataset_type, additional_metadata, datacite model.

    [bold blue]──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────[/bold blue]

    [bold red]Examples of usage[/bold red]:

    [b]Set --title: [/b]
        [b yellow]>[/b yellow] python -m py4lexis.cli.lexis_irods create-dataset project resourcetest --title "CLI TEST DATASET"

    [b]Use additionalMetadata and dataset_type. [/b]
        [b yellow]>[/b yellow] python -m py4lexis.cli.lexis_irods create-dataset project demoproject \
                                --additional-metadata '{\"aKey\" : \"aValue\", \"bKey\" : \"bValue\"}' \
                                --dataset-type 'dataset'
                                
    [b]Upload public dataset (Datacite model required): [/b]
        [b yellow]>[/b yellow] python -m py4lexis.cli.lexis_irods create-dataset public demoproject \
            --datacite '{\"creators\": [{\"name\": \"User123\"}], \"titles\": [{\"lang\": \"en\", \"title\": \"Sample title\"}], \"publisher\": {\"name\": \"User123\"}, \"types\": {\"resourceType\": \"Dataset\", \"resourceTypeGeneral\": \"Dataset\"}, \"publicationYear\": 2024}'
    """
    session: LexisSessionOffline = LexisSessionOffline(in_cli=True,
                                                       refresh_token=refresh_token,
                                                       exit_on_error=exit_on_error)
    irods: iRODS = iRODS(session=session, 
                         host=host,
                         port=port,
                         zone=zone,
                         suppress_print=suppress_print,
                         exit_on_error=exit_on_error)


    irods.create_dataset(access=access,
                         project=project,
                         zone=zone,
                         dataset_type=dataset_type,
                         datacite=loads(datacite) if datacite else None,
                         additional_metadata=loads(additional_metadata) if additional_metadata else None,
                         title=title)
    
    return None
        

@app.command()
def create_dataset_and_upload_directory(access: Annotated[
                                            Access, 
                                            typer.Argument(help="Access type used for the dataset.")
                                        ],
                                        project: Annotated[
                                            str, 
                                            typer.Argument(help="Project's shortname.")
                                        ], 
                                        local_directorypath: Annotated[
                                            str,
                                            typer.Argument(help="Path (absolute or relative) of a directory in local machine.")
                                        ],
                                        zone: Annotated[
                                            Optional[str],
                                            typer.Option(help="iRODS zonename. If 'None', then: 'IT4ILexisV2' is used.")
                                        ]=None,                                        
                                        dataset_type: Annotated[
                                                str,
                                                typer.Option(help="Type of the dataset. Default 'Dataset'.")
                                            ] = None,
                                        additional_metadata: Annotated[
                                                str,
                                                typer.Option(help="Additional (arbitrary) metadata for the dataset in JSON format.")
                                            ] = None,
                                        datacite: Annotated[
                                                str,
                                                typer.Option(help="Datacite metadata for the dataset in JSON format.")
                                            ] = None,
                                        dataset_directorypath: Annotated[
                                            Optional[str],
                                            typer.Option(help="Path (relative) within dataset to which a directory will be uploaded.")
                                        ]=None,
                                        title:  Annotated[
                                                str, 
                                                typer.Option(help="Title of the dataset (by default untitled with datetime as ISO).")
                                        ]=f"UNTITLED_Dataset_{datetime.now().strftime('%d-%m-%Y_%H:%M:%S')}",              
                                        host: Annotated[
                                            Optional[str],
                                            typer.Option(help="Host for the iRODS session.")
                                        ]=None,
                                        port: Annotated[
                                            Optional[str],
                                            typer.Option(help="Port for the iRODS session.")
                                        ]=None,
                                        suppress_print: Annotated[
                                            bool,
                                            typer.Option(help="If prints have to be suppressed or not. By default 'False'.")
                                        ]=False,
                                        refresh_token: Annotated[
                                            Optional[str],
                                            typer.Option(help="Refresh (offline) token used for authentication. By default environemnt variable 'PY4LEXIS_TOKEN' is used.")
                                        ]=None,
                                        exit_on_error: Annotated[
                                            bool,
                                            typer.Option(help="If True, program will exit() on error.")
                                        ]=True) -> None:
    """
    Creates an empty dataset with specified attributes and uploads whole directory with subdirectories and 
    data objects from local to LEXIS dataset via iRODS.

    [bold blue]──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────[/bold blue]

    [bold yellow]Further description:[/bold yellow]

        [b yellow]*[/b yellow] If no dataset_path is defined, then path within the dataset will start by 'directory name' which has to be uploaded.

        [b yellow]*[/b yellow] Parallel transfer is automatically enabled for data objects with 32+ MB. 

        [b yellow]*[/b yellow] Dataset directory path is set to root if dataset_directory='None'.

        [b yellow]*[/b yellow] It will print out an [b]dataset_id[/b] of the created dataset. Given ID should be used for other commands. 

        [b yellow]*[/b yellow] The method is based Datasets class in py4lexis.ddi.

        [b yellow]*[/b yellow] Zone 'IT4ILexisV2' is used by default if zone='None'.

        [b yellow]*[/b yellow] There are some multiple options: dataset_type, additional_metadata, datacite model.

    [bold blue]──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────[/bold blue]

    [bold red]Examples of usage[/bold red]:

    [b]Create new dataset with set and upload data: [/b]
        [b yellow]>[/b yellow] python -m py4lexis.cli.lexis_irods create-dataset-and-upload-directory  project resourcetest examples  --dataset-directorypath "input" 
        
    [b]Create new dataset with set with more attributes: [/b]
        [b yellow]>[/b yellow] See --help of dataset create command (parameters are passed by the same way). python3 -m py4lexis.cli.lexis_irods create-dataset --help
    """
    session: LexisSessionOffline = LexisSessionOffline(in_cli=True,
                                                       refresh_token=refresh_token,
                                                       exit_on_error=exit_on_error)
    irods: iRODS = iRODS(session=session, 
                         suppress_print=suppress_print,
                         host=host,
                         port=port,
                         zone=zone,
                         exit_on_error=exit_on_error)


    new_ds: dict = irods.create_dataset(access=access.value,
                                        project=project,
                                        zone=zone,
                                        dataset_type=dataset_type,
                                        datacite=datacite,
                                        additional_metadata=additional_metadata,
                                        title=title)
    
    irods.upload_directory_to_dataset(local_directorypath=local_directorypath,
                                      access=access.value,
                                      project=project,
                                      dataset_id=new_ds["dataset_id"],
                                      dataset_directorypath=dataset_directorypath,
                                      zone=zone)
    
    return None


@app.command()
def create_directory_within_dataset(dataset_directory_path: Annotated[
                                        str,
                                        typer.Argument(help="Path (relative) of a directory to be created within dataset, e.g. './my_directory' or './first_directory/second_directory'.")
                                    ],
                                    access: Annotated[
                                        Access,
                                        typer.Argument(help="Access type defined for a dataset.")
                                    ],
                                    project: Annotated[
                                        str,
                                        typer.Argument(help="LEXIS project's shortname.")
                                    ],
                                    dataset_id: Annotated[
                                        str,
                                        typer.Argument(help="Dataset's dataset ID (UUID).")
                                    ],
                                    zone: Annotated[
                                        Optional[str],
                                        typer.Option(help="iRODS zonename. If 'None', then: 'IT4ILexisV2' is used.")
                                    ]=None,
                                    host: Annotated[
                                        Optional[str],
                                        typer.Option(help="Host for the iRODS session.")
                                    ]=None,
                                    port: Annotated[
                                        Optional[str],
                                        typer.Option(help="Port for the iRODS session.")
                                    ]=None,
                                    suppress_print: Annotated[
                                        bool,
                                        typer.Option(help="If prints have to be suppressed or not. By default 'False'.")
                                    ]=False,
                                    recurse: Annotated[
                                        bool,
                                        typer.Option(help="Use recurse option or not to create the collection.")
                                    ]=True,
                                    refresh_token: Annotated[
                                        Optional[str],
                                        typer.Option(help="Refresh (offline) token used for authentication. By default environemnt variable 'PY4LEXIS_TOKEN' is used.")
                                    ]=None,
                                    exit_on_error: Annotated[
                                        bool,
                                        typer.Option(help="If True, program will exit() on error.")
                                    ]=True) -> iRODSCollection | None:
    """
    Create a directory (collection) within LEXIS dataset via iRODS.

    [bold blue]──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────[/bold blue]

    [bold yellow]Further description:[/bold yellow]

        [b yellow]*[/b yellow] Zone 'IT4ILexisV2' is used by default if zone='None'.

        [b yellow]*[/b yellow] Recurs is set to 'True' by default.
         

    [bold blue]──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────[/bold blue]

    [bold red]Examples of usage[/bold red]:

    [b]Create new directory within dataset: [/b]
        [b yellow]>[/b yellow] python -m py4lexis.cli.lexis_irods create-directory-within-dataset "./new_dir" project demoproject 2913cc20-b937-11ee-b732-0050568f0c4e

    """
    session: LexisSessionOffline = LexisSessionOffline(in_cli=True,
                                                       refresh_token=refresh_token,
                                                       exit_on_error=exit_on_error)
    irods: iRODS = iRODS(session=session, 
                         suppress_print=suppress_print,
                         host=host,
                         port=port,
                         zone=zone,
                         exit_on_error=exit_on_error)


    irods.create_directory_within_dataset(dataset_directory_path=dataset_directory_path,
                                          access=access.value,
                                          project=project,
                                          dataset_id=dataset_id,
                                          zone=zone,
                                          recurse=recurse)

    return None


if __name__ == "__main__":
    app()