from logging import (
    Logger, 
    getLogger
)
from dateutil import parser
from datetime import datetime
from random import random

from pandas import DataFrame

from py4lexis.session import (
    LexisSession,
    LexisSessionCredentials,
    LexisSessionOffline,
    LexisSessionURL
)
from py4lexis.core.utils import convert_list_of_dicts_to_pandas
from py4lexis.core.decorators import handle_class_exceptions


class Airflow(object):
    
    
    def __init__(self, 
                 session: LexisSession | LexisSessionURL | LexisSessionOffline | LexisSessionCredentials, 
                 print_content: bool=False,
                 suppress_print: bool=True,
                 exit_on_error: bool=False) -> None:
        """
            A class holds methods to manage DAGs within Lexis Airflow instance.

            Attributes
            ----------
            session : LexisSession
                Class that holds LEXIS session
            print_content : bool 
                If True then contents of all requests will be printed.
            suppress_print: bool
                If True then all prints are suppressed. By default: suppress_print=True
            exit_on_error: bool
                    If True, program will exit() on error.

            Methods
            -------
            get_workflows_list(content_as_pandas: bool=False,
                            filter_project: str | None=None) -> list[dict] | DataFrame
                Gets list of existing workflows (DAGs).

            get_workflow_info(workflow_id: str) -> list[dict]
                Gets info of existing workflow (DAG) selected by its workflow ID (dag_id).

            get_workflow_details(workflow_id: str) -> list[dict]
                Gets details of existing workflow (DAG) selected by its workflow ID (dag_id).

            get_workflow_params(self, workflow_id: str) -> dict
                Gets params of existing workflow (DAG) selected by its workflow ID (dag_id).

            execute_workflow(self, workflow_id: str, workflow_parameters: dict, workflow_run_id: str | None=None) ->  dict[str, str | int]
                Gets params of existing workflow (DAG) selected by its workflow ID (dag_id).
            
            get_workflow_states(self, workflow_id: str, content_as_pandas: bool=False) -> list[dict] | DataFrame
                Gets run states of existing workflow (DAG) selected by its workflow ID (dag_id).
        """

        self._exit_on_error: bool = exit_on_error
        self._logging: Logger = getLogger(__name__)
        self._print_content: bool = print_content
        self._suppress_print: bool = suppress_print
        self.__session: LexisSession | LexisSessionURL | LexisSessionOffline | LexisSessionCredentials = session
        

    
    @handle_class_exceptions()
    def get_workflows_list(self,
                           content_as_pandas: bool=False,
                           filter_project: str | None=None) -> list[dict] | DataFrame:
        """
            Gets list of existing workflows (DAGs).

            Parameters
            ----------
            content_as_pandas : bool 
                Convert HTTP response content from JSON to pandas DataFrame. By default: content_as_pandas=False.
            filter_project : str | None
                To filter content by project's short name. By default 'filter_project=None'.

            Returns
            -------
            list[dict] | DataFrame
                List of workflows as list of JSON dictionaries or pandas DataFrame if 'content_as_pandas=True'.
        """

        if not self._suppress_print:
            print(f"Retrieving list of existing workflows (DAGs)...")

        url: str = self.__session.api_air + "/dags"

        content: list[dict] = self.__session.make_request(method="get",
                                                          url=url,
                                                          headers=self.__session.get_air_headers(),
                                                          verify=False,
                                                          to_json=True)

        if content_as_pandas:
            content: DataFrame = convert_list_of_dicts_to_pandas(self.__session, 
                                                                 content["dags"], 
                                                                 suppress_print=self._suppress_print)
        
        if content_as_pandas and filter_project is not None:
            content: DataFrame = content[content["tags"].apply(lambda x: {"name": filter_project} in x)]
 
        if not content_as_pandas and filter_project is not None:
            tmp: list[dict] = []
            for item in content["dags"]:
                if {"name": filter_project} in item["tags"]:
                    tmp.append(item)
            content["dags"] = tmp

        if not self._suppress_print:
            print("List of workflows (DAGs) successfully retrieved (and converted)...") 
        
        if self._print_content:
            print(f"\nContent: {content}\n")
        
        return content


    @handle_class_exceptions()
    def get_workflow_info(self, 
                          workflow_id: str) -> list[dict]:
        """
            Gets info of existing workflow (DAG) selected by its workflow ID (dag_id).

            Parameters
            ----------
            workflow_id: str
                Workflow ID (dag_id) of the existing workflow.                

            Returns
            -------
            dict 
                Info about existing workflow (DAG) as dictionary.
        """

        if not self._suppress_print:
            print(f"Retrieving info about existing workflow (DAG) by its ID...")

        url: str = self.__session.api_air + "/dags" + "/" + workflow_id

        content: list[dict] = self.__session.make_request(method="get",
                                                          url=url,
                                                          headers=self.__session.get_air_headers(),
                                                          verify=False,
                                                          to_json=True)

    
        if not self._suppress_print:
            print("Info about existing workflow (DAG) successfully retrieved...") 
        
        if self._print_content:
            print(f"\nContent: {content}\n")
        
        return content
        

    @handle_class_exceptions()
    def get_workflow_details(self, 
                             workflow_id: str) -> list[dict]:
        """
            Gets details of existing workflow (DAG) selected by its workflow ID (dag_id).

            Parameters
            ----------
            workflow_id: str
                Workflow ID (dag_id) of the existing workflow. 

            Returns
            -------
            list[dict]
                Details of existing workflow as dictionary. 
        """

        if not self._suppress_print:
            print(f"Retrieving details of existing workflow (DAG) by its ID...")

        url: str = self.__session.api_air + "/dags" + "/" + workflow_id + "/details"

        content: list[dict] = self.__session.make_request(method="get",
                                                          url=url,
                                                          headers=self.__session.get_air_headers(),
                                                          verify=False,
                                                          to_json=True)
        if not self._suppress_print:
            print("Details of existing workflow (DAG) successfully retrieved...") 
        
        if self._print_content:
            print(f"\nContent: {content}\n")

        return content


    @handle_class_exceptions()
    def get_workflow_params(self, workflow_id: str) -> dict:
        """
            Gets params of existing workflow (DAG) selected by its workflow ID (dag_id).

            Parameters
            ----------
            workflow_id: str
                Workflow ID (dag_id) of the existing workflow. 

            Returns
            -------
            dict
                Params of existing workflow as dictionary.
        """

        if not self._suppress_print:
            print(f"Retrieving params of existing workflow (DAG) by its ID...")

        url: str = self.__session.api_air + "/dags" + "/" + workflow_id + "/details"

        content: list[dict] = self.__session.make_request(method="get",
                                                          url=url,
                                                          headers=self.__session.get_air_headers(),
                                                          verify=False,
                                                          to_json=True)

        params: dict = content["params"]
        wf_default_parameters: dict = dict()

        for key in params.keys():
            wf_default_parameters[key] = params[key]["value"]

        if not self._suppress_print:
                print("Params of existing workflow (DAG) successfully retrieved...") 
        
        if self._print_content:
            print(f"\nContent: {wf_default_parameters}\n")

        return wf_default_parameters


    @handle_class_exceptions()
    def execute_workflow(self, workflow_id: str, workflow_parameters: dict, workflow_run_id: str | None=None) -> dict[str, str | int]:
        """
            Execute manually an existing workflow (DAG) which is selected by its workflow ID (dag_id).

            Parameters
            ----------
            workflow_id: str
                Workflow ID (dag_id) of the existing workflow.
            workflow_parameters: dict
                Parameters of the existing workflow (DAG) as dictionary.
            workflow_run_id: str | None
                Workflow run id (dag_run_id). If None, will be set automatically.

            Returns
            -------
             dict[str, str | int]
                Response as dictionary. 
        """

        if not self._suppress_print:
            print(f"Executing existing workflow (DAG) by its ID...")

        url: str = self.__session.api_air + "/dags" + "/" +  workflow_id + "/dagRuns"

        if workflow_run_id is None:
            workflow_run_id: str = "py4lexis_exec_" + datetime.now().isoformat() + "_" + str(round(random() * 100))

        workflow_parameters["access_token"] = self.__session.get_access_token()
        workflow_input: dict = {
            "conf": workflow_parameters,
            "dag_run_id": workflow_run_id
        }
        
        content: list[dict] = self.__session.make_request(method="post",
                                                          url=url,
                                                          headers=self.__session.get_air_headers(),
                                                          json_data=workflow_input,
                                                          verify=False,
                                                          to_json=True)

        content_out = {
            "status": 200,
            "workflow_id": content["dag_id"],
            "workflow_run_id": content["dag_run_id"],
            "State": content["state"]
        }

        if not self._suppress_print:
            print("Execute the existing workflow (DAG) was successfull...") 
        
        if self._print_content:
            print(f"\nContent: {content}\n")

        return content_out
        

    @handle_class_exceptions()
    def get_workflow_states(self, workflow_id: str, content_as_pandas: bool=False) -> list[dict] | DataFrame:
        """
            Gets run states of existing workflow (DAG) selected by its workflow ID (dag_id).

            Parameters
            ----------
            workflow_id: str
                Workflow ID (dag_id) of the existing workflow.
            content_as_pandas: bool | None
                If True, content will be returned as DataFrame. False by default.

            Returns
            -------
            dict | DataFrame
                Run states of existing workflow as list of dictionaries or as DataFrame.
        """

        if not self._suppress_print:
            print(f"Retrieving state of existing workflow (DAG) by its ID...")

        url: str = self.__session.api_air + "/dags" + "/" +  workflow_id + "/dagRuns"

        content: list[dict] = self.__session.make_request(method="get",
                                                          url=url,
                                                          headers=self.__session.get_air_headers(),
                                                          verify=False,
                                                          to_json=True)
        workflow_states: list[dict] | DataFrame = []

        for dag in content['dag_runs']:
            exec_time: datetime = parser.parse(dag["execution_date"])

            workflow_state: dict = {
                "workflow_run_id": dag["dag_run_id"],
                "execution_date": exec_time.ctime(),
                "state": dag["state"]
            }
            workflow_states.append(workflow_state)

        if content_as_pandas:
            workflow_states: DataFrame = convert_list_of_dicts_to_pandas(self.__session, 
                                                                         workflow_states, 
                                                                         suppress_print=self._suppress_print)

        if not self._suppress_print:
                print("Run states of existing workflow (DAG) successfully retrieved...") 

        if self._print_content:
            print(f"\nContent: {content}\n")

        return workflow_states