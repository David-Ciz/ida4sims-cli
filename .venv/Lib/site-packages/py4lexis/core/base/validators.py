from logging import Logger
from typing import (
    Literal,
    get_args
)

from json import loads
from json.decoder import JSONDecodeError


from uuid import UUID

from py4lexis.core.exceptions import Py4LexisException
from py4lexis.core.typings.ddi import (
    Access,
    ActionType
)


def check_access(access: Access,
                 log: Logger | None=None) -> Access:
    """
        Checks defined dataset's access type.

        Parameters
        ----------
        access : Literal["public", "project", "user"]
            Access type of the dataset.
        log : Logger | None
            Logger.

        Returns
        -------
        Literal["public", "project", "user"]
            Access type in lowercase.
    """
        
    if not isinstance(access, str) or access.lower() not in get_args(Access):
        msg: str = f"Access has to be one of: {get_args(Access)}!!!"
        
        if log is not None:
            log.error(msg)

        raise Py4LexisException(msg)
    
    return access.lower()


def check_action_type(action_type: ActionType,
                      log: Logger | None=None) -> ActionType | None:
    """
        Checks defined transfer request action type.

        Parameters
        ----------
        action_type : Literal["stage", "upload", "download", "delete"]
            Action type of the request.
        log : Logger | None
            Logger.

        Returns
        -------
        Literal["stage", "upload", "download", "delete"] | None
            Access type in lowercase.
    """
    if action_type is None and log is not None:
        msg: str = f"'action_type' is 'None'."
        log.warning(msg)

    if action_type is None:
        return None
        
    if not isinstance(action_type, str) or action_type.lower() not in get_args(ActionType):
        msg: str = f"Access has to be one of: {get_args(ActionType)}!!!"
        
        if log is not None:
            log.error(msg)

        raise Py4LexisException(msg)
    
    return action_type.lower()
        

def is_bool(parameter_name: str, 
            parameter: bool | None,
            log: Logger | None=None) -> bool | None:
    """
        Check if parameter is 'bool'.

        Parameters
        ----------
        parameter_name : str
            Name of the parameter being validated.
        parameter : bool | None
            Parameter being validated.
        log : Logger | None
            Logger.

        Returns
        -------
        bool | None
            Validated parameter.
    """
    if parameter is None and log is not None:
        msg: str = f"'{parameter_name}' is 'None'."
        log.warning(msg)
    
    if parameter is not None and not isinstance(parameter, bool):
        msg: str = f"'{parameter_name}' has to be a bool!!!"
        if log is not None:
            log.error(msg)
        raise Py4LexisException(msg)
    
    return parameter

        
def is_string(parameter_name: str, 
              parameter: str | None,
              log: Logger | None=None) -> str | None:
    """
        Check if parameter is 'str'.

        Parameters
        ----------
        parameter_name : str
            Name of the parameter being validated.
        parameter : str | None
            Parameter being validated.
        log : Logger | None
            Logger.

        Returns
        -------
        str | None
            Validated parameter.
    """
    if parameter is None and log is not None:
        msg: str = f"'{parameter_name}' is 'None'."
        log.warning(msg)
    
    if parameter is not None and not isinstance(parameter, str):
        msg: str = f"'{parameter_name}' has to be a string!!!"
        if log is not None:
            log.error(msg)
        raise Py4LexisException(msg)
    
    return parameter
    
    
def is_dictionary(parameter_name: str, 
                  parameter: dict | str | None,
                  log: Logger | None=None) -> dict | None:
    """
        Checks if parameter is dictionary. If the dictionary is in JSON format, JSON is being loaded.

        Parameters
        ----------
        parameter_name : str
            Name of the parameter being validated.
        parameter : dict | str | None
            Parameter being validated.
        log : Logger | None
            Logger.

        Returns
        -------
        dict | None
            Validated parameter.
    """

    if parameter is None and log is not None:
        msg: str = f"'{parameter_name}' is 'None'."
        log.warning(msg)
    
    if parameter is not None and isinstance(parameter, str):
        try:
            if log is not None:
                log.info(f"Parameter: {parameter}")
            parameter = loads(parameter)

        except JSONDecodeError:
            raise Py4LexisException(f"'{parameter_name}' is 'str' but not in JSON format!!! Cannot be transfored to dictionary!!!")

    if parameter is not None and not isinstance(parameter, dict):
        msg: str = f"'{parameter_name}' has to be a dict!!!"
        if log is not None:
            log.error(msg)
        raise Py4LexisException(msg)
    
    return parameter
        

def check_zone(zone: str | None,
               default_zone: str) -> str:
    """
        Checks if zone is defined and it is valid string.

        Parameters
        ----------
        zone : str | None
            Name of iRODS zone
        default_zone : str
            Name of default iRODS to be set when 'zone' is 'None'


        Returns
        -------
        str
            Zone.
    """
    if (zone is not None) and not isinstance(zone, str):
        raise Py4LexisException("'zone' is not a string")
    
    if zone is None:
        zone = default_zone

    return zone


def check_if_uuid(uuid: str | None, 
                  parameter_name: Literal["dataset_id", "request_id"]="dataset_id",
                  log: Logger | None=None) -> str | None:
    """
        Checks if passed string is UUID. If passed string is not UUID, an Exception will be thrown.

        Parameters
        ----------
        uuid : str
            UUID.
        parameter_name : str
            Name of parameter which is beeing tested. By default is to set to 'InternalID' which is being tested across the most of methods.

        Returns
        -------
        str | None
            Validated uuid.
    """
    if uuid is None and log is not None:
        msg: str = f"'{parameter_name}' is 'None'."
        log.warning(msg)

    if uuid is not None:
        try:
            UUID(uuid, version=4)

        except ValueError:
            msg: str = f"'{parameter_name}' is not valid UUID!"
            
            if log is not None:
                log.error(msg)

            raise Py4LexisException(f"'{parameter_name}' is not valid UUID!")
        
    return uuid