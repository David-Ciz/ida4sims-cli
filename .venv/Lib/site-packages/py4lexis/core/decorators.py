from sys import modules
from logging import Logger
from functools import wraps

import irods.exception
from irods.exception import ExceptionOpenIDAuthUrl

from py4lexis.core.exceptions import (
    Py4LexisException, 
    Py4LexisAuthException, 
    Py4LexisSessionException,
    Py4LexisDownloadException,
    Py4LexisAirflowException,
    Py4LexisAPIException,
    Py4LexisiRODSAPIException, 
    Py4LexisiRODSException, 
    Py4LexisTUSException
)
from py4lexis.core.base.common import log_and_print_errors
from py4lexis.core.base.validators import (
    check_access, 
    check_if_uuid, 
    check_zone
)


def handle_common_variables():
    def decorator(func):
        @wraps(func)
        def wrapper(self, *args, **kwargs):
            
            __default_zone: str = getattr(self, "_default_zone")

            if "access" in kwargs.keys():
                kwargs["access"] = check_access(kwargs["access"])

            if "internal_id" in kwargs.keys():
                check_if_uuid(kwargs["internal_id"])

            if "zone" in kwargs.keys():
                kwargs["zone"] = check_zone(kwargs["zone"], __default_zone)

            if "zone" in func.__annotations__.keys() and "zone" not in kwargs.keys():
                kwargs["zone"] = check_zone(None, __default_zone)            
            
            __result = func(self, *args, **kwargs)
            
            return __result

        return wrapper
    return decorator


def handle_class_exceptions():
    def decorator(func):
        @wraps(func)
        def wrapper(self, *args, **kwargs):
            __module: str = modules[func.__module__]
            __error_origin: str = f"Error occured in {__module.__name__}.{func.__name__}(): "
            __logging: Logger = getattr(self, "_logging")
            __exit_on_error: bool = getattr(self, "_exit_on_error")
            try:
                __suppress_print: bool = getattr(self, "_suppress_print")
            except AttributeError:
                __suppress_print: bool = getattr(self, "suppress_print")
            __log_msg: str = ""
            try:
                __result = func(self, *args, **kwargs)
                return __result
            
            except (Py4LexisException, Py4LexisAuthException, Py4LexisSessionException, Py4LexisDownloadException,\
                    Py4LexisAirflowException, Py4LexisAPIException, Py4LexisiRODSAPIException, Py4LexisiRODSException,\
                    Py4LexisTUSException) as err:
                __log_msg = f"{__error_origin}{str(err)}"
                log_and_print_errors(__logging, __log_msg, __suppress_print, __exit_on_error)    
                
            except KeyError as err:
                __log_msg = f"{__error_origin}{str(err)}"
                log_and_print_errors(__logging, __log_msg, __suppress_print, __exit_on_error)    

            except ExceptionOpenIDAuthUrl as err:
                __log_msg = f"OpenID Exception on iRODS occurred. Exception: {err}"
                log_and_print_errors(__logging, __log_msg, __suppress_print, __exit_on_error)

            except irods.exception.iRODSException as err:
                __log_msg = f"iRODS Exception: {err}"
                log_and_print_errors(__logging, __log_msg, __suppress_print, __exit_on_error)

            except irods.exception.PycommandsException as err:
                __log_msg = f"iRODS Python client exception: {type(err)} {err}"
                log_and_print_errors(__logging, __log_msg, __suppress_print, __exit_on_error)

            except Exception as err:
                log_msg: str = f"Unhandled Exception occurred. Exception: {err}"
                log_and_print_errors(__logging, log_msg, __suppress_print, __exit_on_error)

        return wrapper
    return decorator