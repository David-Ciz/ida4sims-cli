from __future__ import annotations
from enum import Enum
from typing import List, Optional, Literal
from pydantic import AnyUrl, BaseModel, Field
import datetime



class Datacite(BaseModel):
    types: Optional[Types] = None
    identifiers: List[Identifier] = Field(
        None, min_length=1
    )
    creators: List[Creator] = Field(None, min_length=1)
    titles: List[Title] = Field(None, min_length=1)
    publisher: Publisher
    publicationYear: int
    subjects: Optional[List[Subject]] = Field(None)
    contributors: Optional[List[Contributor]] = Field(None)
    dates: Optional[List[DateModel]] = Field(None)
    language: Optional[str] = None
    alternateIdentifiers: Optional[List[AlternateIdentifier]] = Field(
        None
    )
    relatedIdentifiers: Optional[List[RelatedIdentifier]] = Field(
        None
    )
    sizes: Optional[List[str]] = Field(None)
    formats: Optional[List[str]] = Field(None)
    version: Optional[str] = None
    rightsList: Optional[List[RightsListItem]] = Field(None)
    descriptions: Optional[List[Description]] = Field(None)
    geoLocations: Optional[List[GeoLocation]] = Field(None)
    fundingReferences: Optional[List[FundingReference]] = Field(None)
    container: Optional[Container] = None
    relatedItems: Optional[List[RelatedItem]] = Field(None)
    schemaVersion: Literal['http://datacite.org/schema/kernel-4'] | None = None
    
    @staticmethod
    def get_basic_data(creator, title):
        """
        Generates basic object for Datacite model with fields that are required on API side.
        """
        data = {
            "creators": [
                {
                    "name": creator
                }
            ],
            "titles": [
                {
                    "lang": "en",
                    "title": title
                }
            ],
            "publisher": {
                "name": creator
            },
            "types": {
                "resourceType": "Dataset",
                "resourceTypeGeneral": "Dataset"
            },
            "publicationYear": datetime.datetime.now().year
        }
        return data
    
    

class Identifier(BaseModel):
    identifier: str
    identifierType: str


class Subject(BaseModel):
    subject: str
    subjectScheme: Optional[str] = None
    schemeUri: Optional[AnyUrl] = None
    valueUri: Optional[AnyUrl] = None
    lang: Optional[str] = None


class AlternateIdentifier(BaseModel):
    alternateIdentifier: str
    alternateIdentifierType: str


class RightsListItem(BaseModel):
    rights: Optional[str] = None
    rightsUri: Optional[AnyUrl] = None
    rightsIdentifier: Optional[str] = None
    rightsIdentifierScheme: Optional[str] = None
    schemeUri: Optional[AnyUrl] = None
    lang: Optional[str] = None


class Container(BaseModel):
    type: Optional[str] = None
    title: Optional[str] = None
    firstPage: Optional[str] = None


class NameType(Enum):
    Organizational = 'Organizational'
    Personal = 'Personal'


class NameIdentifier(BaseModel):
    nameIdentifier: str
    nameIdentifierScheme: str
    schemeUri: Optional[AnyUrl] = None



class Affiliation(BaseModel):
    name: str
    affiliationIdentifier: Optional[str] = None
    affiliationIdentifierScheme: Optional[str] = None
    schemeUri: Optional[AnyUrl] = None



class TitleType(Enum):
    AlternativeTitle = 'AlternativeTitle'
    Subtitle = 'Subtitle'
    TranslatedTitle = 'TranslatedTitle'
    Other = 'Other'


class ContributorType(Enum):
    ContactPerson = 'ContactPerson'
    DataCollector = 'DataCollector'
    DataCurator = 'DataCurator'
    DataManager = 'DataManager'
    Distributor = 'Distributor'
    Editor = 'Editor'
    HostingInstitution = 'HostingInstitution'
    Producer = 'Producer'
    ProjectLeader = 'ProjectLeader'
    ProjectManager = 'ProjectManager'
    ProjectMember = 'ProjectMember'
    RegistrationAgency = 'RegistrationAgency'
    RegistrationAuthority = 'RegistrationAuthority'
    RelatedPerson = 'RelatedPerson'
    Researcher = 'Researcher'
    ResearchGroup = 'ResearchGroup'
    RightsHolder = 'RightsHolder'
    Sponsor = 'Sponsor'
    Supervisor = 'Supervisor'
    WorkPackageLeader = 'WorkPackageLeader'
    Other = 'Other'


class DateType(Enum):
    Accepted = 'Accepted'
    Available = 'Available'
    Copyrighted = 'Copyrighted'
    Collected = 'Collected'
    Created = 'Created'
    Issued = 'Issued'
    Submitted = 'Submitted'
    Updated = 'Updated'
    Valid = 'Valid'
    Withdrawn = 'Withdrawn'
    Other = 'Other'


class ResourceTypeGeneral(Enum):
    Audiovisual = 'Audiovisual'
    Book = 'Book'
    BookChapter = 'BookChapter'
    Collection = 'Collection'
    ComputationalNotebook = 'ComputationalNotebook'
    ConferencePaper = 'ConferencePaper'
    ConferenceProceeding = 'ConferenceProceeding'
    DataPaper = 'DataPaper'
    Dataset = 'Dataset'
    Dissertation = 'Dissertation'
    Event = 'Event'
    Image = 'Image'
    InteractiveResource = 'InteractiveResource'
    Instrument = 'Instrument'
    Journal = 'Journal'
    JournalArticle = 'JournalArticle'
    Model = 'Model'
    OutputManagementPlan = 'OutputManagementPlan'
    PeerReview = 'PeerReview'
    PhysicalObject = 'PhysicalObject'
    Preprint = 'Preprint'
    Report = 'Report'
    Service = 'Service'
    Software = 'Software'
    Sound = 'Sound'
    Standard = 'Standard'
    StudyRegistration = 'StudyRegistration'
    Text = 'Text'
    Workflow = 'Workflow'
    Other = 'Other'


class RelatedIdentifierType(Enum):
    ARK = 'ARK'
    arXiv = 'arXiv'
    bibcode = 'bibcode'
    DOI = 'DOI'
    EAN13 = 'EAN13'
    EISSN = 'EISSN'
    Handle = 'Handle'
    IGSN = 'IGSN'
    ISBN = 'ISBN'
    ISSN = 'ISSN'
    ISTC = 'ISTC'
    LISSN = 'LISSN'
    LSID = 'LSID'
    PMID = 'PMID'
    PURL = 'PURL'
    UPC = 'UPC'
    URL = 'URL'
    URN = 'URN'
    w3id = 'w3id'


class RelationType(Enum):
    IsCitedBy = 'IsCitedBy'
    Cites = 'Cites'
    IsSupplementTo = 'IsSupplementTo'
    IsSupplementedBy = 'IsSupplementedBy'
    IsContinuedBy = 'IsContinuedBy'
    Continues = 'Continues'
    IsDescribedBy = 'IsDescribedBy'
    Describes = 'Describes'
    HasMetadata = 'HasMetadata'
    IsMetadataFor = 'IsMetadataFor'
    HasVersion = 'HasVersion'
    IsVersionOf = 'IsVersionOf'
    IsNewVersionOf = 'IsNewVersionOf'
    IsPreviousVersionOf = 'IsPreviousVersionOf'
    IsPartOf = 'IsPartOf'
    HasPart = 'HasPart'
    IsPublishedIn = 'IsPublishedIn'
    IsReferencedBy = 'IsReferencedBy'
    References = 'References'
    IsDocumentedBy = 'IsDocumentedBy'
    Documents = 'Documents'
    IsCompiledBy = 'IsCompiledBy'
    Compiles = 'Compiles'
    IsVariantFormOf = 'IsVariantFormOf'
    IsOriginalFormOf = 'IsOriginalFormOf'
    IsIdenticalTo = 'IsIdenticalTo'
    IsReviewedBy = 'IsReviewedBy'
    Reviews = 'Reviews'
    IsDerivedFrom = 'IsDerivedFrom'
    IsSourceOf = 'IsSourceOf'
    IsRequiredBy = 'IsRequiredBy'
    Requires = 'Requires'
    IsObsoletedBy = 'IsObsoletedBy'
    Obsoletes = 'Obsoletes'
    IsCollectedBy = 'IsCollectedBy'
    Collects = 'Collects'


class DescriptionType(Enum):
    Abstract = 'Abstract'
    Methods = 'Methods'
    SeriesInformation = 'SeriesInformation'
    TableOfContents = 'TableOfContents'
    TechnicalInfo = 'TechnicalInfo'
    Other = 'Other'


class FunderIdentifierType(Enum):
    ISNI = 'ISNI'
    GRID = 'GRID'
    Crossref_Funder_ID = 'Crossref Funder ID'
    ROR = 'ROR'
    Other = 'Other'

class NumberType(Enum):
    Article = 'Article'
    Chapter = 'Chapter'
    Report = 'Report'
    Other = 'Other'

class Types(BaseModel):
    resourceType: str
    resourceTypeGeneral: ResourceTypeGeneral

class Creator1(BaseModel):
    name: str
    nameType: Optional[NameType] = None
    givenName: Optional[str] = None
    familyName: Optional[str] = None

class RelatedItemIdentifier(BaseModel):
    relatedItemIdentifier: Optional[str] = None
    relatedItemIdentifierType: Optional[RelatedIdentifierType] = None

class Contributor1(BaseModel):
    contributorType: ContributorType
    name: str
    nameType: Optional[NameType] = None
    givenName: Optional[str] = None
    familyName: Optional[str] = None

class RelatedItem(BaseModel):
    relatedItemType: ResourceTypeGeneral
    relationType: RelationType
    relatedItemIdentifier: Optional[RelatedItemIdentifier] = None
    creators: Optional[List[Creator1]] = Field(None, min_items=1)
    titles: List[Title] = Field(..., min_items=1)
    publicationYear: Optional[int] = None
    volume: Optional[str] = None
    issue: Optional[str] = None
    number: Optional[str] = None
    numberType: Optional[NumberType] = None
    firstPage: Optional[str] = None
    lastPage: Optional[str] = None
    publisher: Optional[str] = None
    edition: Optional[str] = None
    contributors: Optional[List[Contributor1]] = Field(None)

class Creator(BaseModel):
    name: str
    nameType: Optional[NameType] = None
    givenName: Optional[str] = None
    familyName: Optional[str] = None
    nameIdentifiers: Optional[List[NameIdentifier]] = Field(
        None, min_length=1
    )
    affiliation: Optional[List[Affiliation]] = Field(
        None, min_length=1
    )
    lang: Optional[str] = None


class Title(BaseModel):
    title: str
    titleType: Optional[TitleType] = None
    lang: Optional[str] = None


class Contributor(BaseModel):
    contributorType: ContributorType
    name: str
    nameType: Optional[NameType] = None
    givenName: Optional[str] = None
    familyName: Optional[str] = None
    nameIdentifiers: Optional[List[NameIdentifier]] = set()
    affiliation: Optional[List[Affiliation]] = Field(
        None, min_length=1
    )
    lang: Optional[str] = None


class DateModel(BaseModel):
    date: str
    dateType: DateType
    dateInformation: Optional[str] = None


class RelatedIdentifier(BaseModel):
    relatedIdentifier: str
    relatedIdentifierType: RelatedIdentifierType
    relationType: RelationType
    relatedMetadataScheme: Optional[str] = None
    schemeUri: Optional[AnyUrl] = None
    schemeType: Optional[str] = None
    resourceTypeGeneral: Optional[ResourceTypeGeneral] = None


class Description(BaseModel):
    description: str
    descriptionType: DescriptionType
    lang: Optional[str] = None


class GeoLocationBox(BaseModel):
    westBoundLongitude: float
    eastBoundLongitude: float
    southBoundLatitude: float
    northBoundLatitude: float


class FundingReference(BaseModel):
    funderName: str
    funderIdentifier: Optional[str] = None
    funderIdentifierType: Optional[FunderIdentifierType] = None
    awardNumber: Optional[str] = None
    awardUri: Optional[AnyUrl] = None
    awardTitle: Optional[str] = None


class GeoLocationPoint(BaseModel):
    pointLongitude: float
    pointLatitude: float


class GeoLocationPolygon(BaseModel):
    polygonPoints: List[GeoLocationPoint] = Field(..., min_length=4)
    inPolygonPoint: Optional[GeoLocationPoint] = None


class GeoLocation(BaseModel):
    geoLocationPlace: Optional[str] = None
    geoLocationPoint: Optional[GeoLocationPoint] = None
    geoLocationBox: Optional[GeoLocationBox] = None
    geoLocationPolygons: Optional[List[GeoLocationPolygon]] = Field(None)

class Publisher(BaseModel):
    name: str
    publisherIdentifier: Optional[str] = None
    publisherIdentifierScheme: Optional[str] = None
    schemeUri: Optional[AnyUrl] = None
    lang: Optional[str] = None


